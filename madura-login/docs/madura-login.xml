<?xml-stylesheet type="text/xsl" href="MaduraHTML.xsl" ?>

<doc xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://www.madurasoftware.com/maduradocs.xsd">
	<title>
		<MainTitle>Madura Login</MainTitle>
		<SubTitle>User Guide</SubTitle>
		<Author>Roger Parkinson</Author>
		<Revision>$Revision: 1$</Revision>
		<image>logo.jpg</image>
		<references>
			<reference t="Spring Framework" url="http://www.springframework.org" />
			<reference t="Vaadin" url="https://vaadin.com/home"/>
		</references>
	</title>
	<body>
		<process-log/>
		<process-references/>
		<h1 t="Overview">
		<p>This is a quick way to add authentication and authorisation to a demo. It might be okay in production
		with some modifications and extensions, but it is intended for demos.</p>
		<p>By 'quick' we mean all you need to do is add this to your maven dependencies and your get your Spring<referenceLink t="Spring Framework"/> configuration to
		scan the right package, then your war file will start using it, assuming you are deploying to a servlet 3.0 applicaton server (we tested on Tomcat 7).</p>
		<p>But you'll likely want to customise it a little. Customising is easy.</p>
		<p>We configure Spring like this:</p>
        <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <context:component-scan base-package="nz.co.senanque.login" />

</beans>
        ]]></code>
        <p>Your Spring configuration probably has other beans in it too, so this is the minimum to get started.</p>
		</h1>
		<h1 t="Customising">
		<p>You can do the following:</p>
		<list>
		<le>Change the look of the login prompt screen.</le>
		<le>Add more locales.</le>
		<le>Change the user list.</le>
		<le>Replace user authentication mechanism with one of your own.</le>
		</list>
		<h2 t="Change the Login Prompt Screen">
		<p>The login prompt is controlled by the login.html file, and that loads a css file, and some image files. By default it uses the
		login.html file in <courier>nz.co.senanque.login.login.html</courier> and that file looks like this:</p>
        <code><![CDATA[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/ DTD/xhtml1-transitional.dtd">
<html>
<head>
<title>~TITLE</title>
<link rel="stylesheet" type="text/css" href="~CONTEXTPATH/login.css"/>
<link rel='icon' type='image/x-icon' href='~CONTEXTPATH/favicon.ico' />
</head>
<body>
	<div>
		<form id='loginf' action='~CONTEXTPATH/auth/login' method='post'>
			<div>
				<label>
					<select name="locale" class="icon-menu">
					<option value="en" selected style="background-image:url(~CONTEXTPATH/flags/English.png)">English</option>
					<option value="fr" style="background-image:url(~CONTEXTPATH/flags/French.png)">French</option>
					</select>
				</label>
				<h1>~TITLE</h1>
				<label> 
					<span>~NAME</span><input type="text" name="user" autofocus />
				</label> 
				<label>
					<span>~PASSWORD</span><input type="password" name="password" />
				</label> 
				<label> 
					<input type="submit" value="~LOGIN" />
				</label> 
				<label> <span class="error">~ERROR</span></label>
				<label class="logo"/>
			</div>
		</form>
	</div>
</body>
</html>
<!-- Vaadin-Refresh -->
        ]]></code>
		<p>This is just an ordinary html file except for the ~ fields which get substituted before it renders. We
		could have used JSP or similar for this but we wanted to keep the setup very simple. Notice the comment at the end, you need this
		to support Vaadin<referenceLink t="Vaadin"/> applications.</p>
		<p>You can replace this completely by putting your own login.html in your WEB-INF directory. Or you can just change the 
		dependent files. For example you can put your own copy of login.css into WEB-INF and it will use that. In fact if you just want to change
		the css file don't bother copying the login.html into WEB-INF. So the rule is to customise a file put your copy into WEB-INF.</p>
		<p>The other files it will look for (which can be replaced) are users.csv, favicon.png and logo.gif.</p>
		</h2>
		<h2 t="Add More Locales">
		<p>The login.html file includes a prompt for the locale. By default this has only two locales: en and fr. It provides an easy way to switch your
		demo over to French. You may want more (or different) locales. Just edit your required options into your customised login.html. You can, if you
		want, add flags into your WEB-INF/flags directory. These only show up in the drop down on FireFox, but they look pretty.</p>
		</h2>
		<h2 t="Change the User List">
		<p>The list of users is in users.csv which can be replaced by your file in WEB-INF. The default file looks like this:</p>
        <code><![CDATA[
admin,admin,A,B,C,ADMIN
user,user,A
        ]]></code>
        <p>The format is user, password, permissions...</p>
        <p>Just edit it to add more users and passwords as needed. The permissions are just strings. Once authenticated the user and permissions are put into the
        http session where the application can pick them up and use them. Obviously this not a secure way to store real user names and passwords.</p>
		</h2>
		<h2 t="Replace User Authentication Mechanism">
		<p>This is not so simple. If you get this far you probably want to look at commercial authentication mechanisms suitable for production.
		However the mechanism is replaceable. Provide a class that implements <courier>nz.co.senanque.login.users.UserRepository</courier> and 
		add it to the Spring beans configuration. It will be autowired into the login process.</p>
		</h2>
        </h1>
        <h1 t="Authorising your Application">
        <p>The login prompt will ask for a user/password and if it is given a valid one then it will redirect to your application. That might be all you want to do
        but you probably want to do a little more such find out what user logged in and what permissions they have. You first have to get your HttpSession
        which can be done various ways depending on what technology you are using. Then you can find the information on the session attributes.</p>
        <code><![CDATA[
String currentUser = (String)session.getAttribute(AuthenticationDelegate.USERNAME);
String localeString = (String)session.getAttribute(AuthenticationDelegate.LOCALE);
Set<String> currentPermissions = (Set<String>)session.getAttribute(AuthenticationDelegate.PERMISSIONS);
        ]]></code>
        <p>That gets you the user, locale and permissions. The permissions are just a list of strings.</p>
        </h1>
        <h1 t="Demoware?">
        <p>It might not always be demo ware but it is at this stage. Here's why:</p>
        <list>
        <le>It doesn't like Chrome or IE, only FireFox.</le>
        <le>It ought to have a way to change your password or at least cater for the 'forgot password' scenario.</le>
        <le>It is probably fairly secure but we haven't verified that, for example we haven't used it with HTTPS nor have we had it reviewed for security.</le>
        </list>
        <p>The good thing is you can put this into your application very easily, and replace it with something else for production. The
        application has very few dependencies on the login mechanism.</p>
        </h1>
		<a1 t="Release Notes">
		<note>You need Java 1.7 to compile this project.</note>
		<table width="12cm">
			<tw>12cm</tw>
		<tr>
			<th>1.0.0</th>
		</tr>
		<tr>
			<td>Initial version</td>
		</tr>
		</table>
		</a1>
	</body>
	
</doc>
